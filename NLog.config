<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
			autoReload="true" throwExceptions="false"
			internalLogToConsole="false" internalLogToConsoleError="false" internalLogFile="NLog_internal.log" internalLogLevel="Info" globalThreshold="Debug">

<!--	targets
AspNetTrace- Writes log messages to the ASP.NET trace.
AspResponse- Outputs log messages through the ASP Response object.
Chainsaw- Sends log messages to the remote instance of Chainsaw application from log4j.
ColoredConsole- Writes log messages to the console with customizable coloring.
Console- Writes log messages to the console.
Database- Writes log messages to the database using an ADO.NET provider.
Debug- Mock target - useful for testing.
Debugger- Writes log messages to the attached managed debugger.
EventLog- Writes log message to the Event Log.
File- Writes log messages to one or more files.
FormControl- Logs text to Windows.Forms.Control.Text property control of specified Name.
LogReceiverService- Sends log messages to a NLog Receiver Service (using WCF or Web Services).
Mail- Sends log messages by email using SMTP protocol.
Memory- Writes log messages to an ArrayList in memory for programmatic retrieval.
MessageBox- Pops up log messages as message boxes.
MethodCall- Calls the specified static method on each log message and passes contextual parameters to it.
MSMQ- Writes log message to the specified message queue handled by MSMQ.
Network- Sends log messages over the network.
NLogViewer- Sends log messages to the remote instance of NLog Viewer.
Null- Discards log messages. Used mainly for debugging and benchmarking.
OutputDebugString- Outputs log messages through the OutputDebugString() Win32 API.
PerfCounter- Increments specified performance counter on each write.
RichTextBox- Log text a Rich Text Box control in an existing or new form.
Trace- Sends log messages through System.Diagnostics.Trace.
WebService- Calls the specified web service on each log message.
-->
	<targets>

<!--	layouts
${asp-application}- ASP Application variable.
${aspnet-application}- ASP.NET Application variable.
${aspnet-request}- ASP.NET Request variable.
${aspnet-session}- ASP.NET Session variable.
${aspnet-sessionid}- ASP.NET Session ID.
${aspnet-user-authtype}- ASP.NET User variable.
${aspnet-user-identity}- ASP.NET User variable.
${asp-request}- ASP Request variable.
${asp-session}- ASP Session variable.
${basedir}- The current application domain's base directory.
${callsite}- The call site (class name, method name and source information).
${counter}- A counter value (increases on each layout rendering).
${date}- Current date and time.
${document-uri}- URI of the HTML page which hosts the current Silverlight application.
${environment}- The environment variable.
${event-context}- Log event context data.
${exception}- Exception information provided through a call to one of the Logger.*Exception() methods.
	:format=Message, Type, ShortType, ToString, Method, StackTrace.
${file-contents}- Renders contents of the specified file.
${gc}- The information about the garbage collector.
${gdc}- Global Diagnostics Context item. Provided for compatibility with log4net.
${guid}- Globally-unique identifier (GUID).
${identity}- Thread identity information (name and authentication information).
${install-context}- Installation parameter (passed to InstallNLogConfig).
${level}- The log level.
${literal}- A string literal.
${log4jxmlevent}- XML event description compatible with log4j, Chainsaw and NLogViewer.
${logger}- The logger name.
${longdate}- The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
${machinename}- The machine name that the process is running on.
${mdc}- Mapped Diagnostic Context item. Provided for compatibility with log4net.
${message}- The formatted log message.
${ndc}- Nested Diagnostic Context item. Provided for compatibility with log4net.
${newline}- A newline literal.
${nlogdir}- The directory where NLog.dll is located.
${performancecounter}- The performance counter.
${processid}- The identifier of the current process.
${processinfo}- The information about the running process.
${processname}- The name of the current process.
${processtime}- The process time in format HH:mm:ss.mmm.
${qpc}- High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
${registry}- A value from the Registry.
${shortdate}- The short date in a sortable format yyyy-MM-dd.
${sl-appinfo}- Information about Silverlight application.
${specialfolder}- System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
${stacktrace}- Stack trace renderer.
${tempdir}- A temporary directory.
${threadid}- The identifier of the current thread.
${threadname}- The name of the current thread.
${ticks}- The Ticks value of current date and time.
${time}- The time in a 24-hour, sortable format HH:mm:ss.mmm.
${windows-identity}- Thread Windows identity information (username).

				layout="${date:format=dd HH\:mm\:ss.ffff} : ${level} : ${message} ${exception:format=ToString}" 
-->
		<target xsi:type="File" name="file" fileName="${basedir}Log_${logger}\${date:format=yyyy\-MM}\${shortdate}.log" 
				layout="${time} : ${level} : ${message} ${exception:format=ToString}" 
				/>
		
		<target xsi:type="File" name="csv" fileName="${basedir}Log_${logger}\${date:format=yyyy\-MM}\${shortdate}.csv">
			<layout xsi:type="CSVLayout">
				<column name="time" layout="${date:format=HH\:mm\:ss}" />
				<column name="level" layout="${level}"/>
				<column name="message" layout="${message}" />
				<column name="exception" layout="${exception:format=ToString}"/>
			</layout>
		</target>
		
		<target xsi:type="Console" name="console"
				layout="${date:format=dd HH\:mm\:ss} : ${level} : ${message} ${exception:format=ToString}" 
				/>
		
		<target xsi:type="Mail" name="mail"
						body="${date} : ${level} : ${message} ${exception:format=ToString}${newline}"
						layout="${date} : ${level} : ${message} ${exception:format=ToString}${newline}"
						from="yu.karpenko@it.od.ua"
						smtpPort="25"
						smtpServer="10.0.32.19"
						subject="${logger}"
						to="yu.karpenko@it.od.ua"
							/>
		<target xsi:type="Network" name="net2" address="tcp://10.0.62.217:9066" newLine="true" maxMessageSize="4000" />
		<target xsi:type="Network" name="net1" address="tcp://10.0.63.1:9066" newLine="true" maxMessageSize="4000" />
		<target xsi:type="NLogViewer" name="net3" address="tcp://10.0.32.111:9067"/>
	</targets>
	<rules>
		<logger name="*" minlevel="Debug" writeTo="file, console" />
		<logger name="*" minlevel="Info" writeTo="net1, net2, net3" />

		<!--
		<logger name="*" minlevel="Info" writeTo="csv, net1, net2, net3" />
			т.к. SMTP теперь у всех разный
		<logger name="*" minlevel="Error" writeTo="mail" />
		<logger name="BS*" levels="Debug" writeTo="net1, net2" />
		-->
	
	</rules>
	
	<!--	For using in exe.config
	<configSections>
		<section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog"/>
	</configSections>

	<nlog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<targets>
			<target name="file" type="File" fileName="${basedir}/${logger}/${shortdate}.log" layout="${time} : ${level} : ${message} ${exception}" />
			<target xsi:type="LogReceiverTcpService" name="tcp" endpointAddress="net.tcp://10.0.1.110:6666/Errors" clientId="${guid:cached=true}" useBinaryEncoding="false"/>
			<target xsi:type="LogReceiverTcpService" name="web" endpointAddress="net.tcp://10.0.32.111:6666/Errors" clientId="${guid:cached=true}" useBinaryEncoding="false"/>
		</targets>

		<rules>
			<logger name="*" minlevel="Debug" writeTo="file" />
			<logger name="*" minlevel="Info" writeTo="tcp" />
			<logger name="*" minlevel="Info" writeTo="web" />
		</rules>
	</nlog>
	-->

</nlog>


